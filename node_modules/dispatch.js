/*
 * Copyright 2010 Nicolas Lochet Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *      
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */
 
exports.inject = function (logger) {
	return {
		chain : function (rules) {
			return function (req, res) {
				// run every rules to find the first matching rule
				for (i = 0, l = rules.length; i < l ; i++) {
					var o = rules[i];
					// if o is a valid rule we run it then break the flow
					if (o.valid(req)) {
						o.run(req,res);
						break;
					}
				}
			}
		}
		,
		filter : function (def) {
			var valid;
			
			var str_or_rx = function (req) {return req.url.match(def);}
			
			switch (typeof def) {
				case 'boolean':
					valid = function() {return def;}
					break;
				case 'function':
					valid = def;
					break;
				case 'string': 
					valid = str_or_rx;
					break;	
				case 'object':
					if (def instanceof RegExp){
						valid = str_or_rx;
						break;
					}
					if (def instanceof Array) {
						var filters = [];
						for (i = 0, l = def.length; i < l ; i++) {
							var d = def[i];
							filters.push(this.filter(d));
						}
						valid = function (req) {
							for (i = 0, l = filters.length; i < l ; i++) {
								var f = filters[i];
								if (! f(req)) {
									return false;
								}
							}
							return true;
						}
						break;
					}
					
				default:
					throw 'Unsupported filter definition';
			}
			return valid;
		}
		,
		rule : function (def, action) {
			return {
				'valid': this.filter(def),
				'run': action
			}
		}
	}
}
