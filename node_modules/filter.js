/*
 * Copyright 2010 Nicolas Lochet Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *      
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */
 
exports.inject = function (logger) {
	
	function filter_object(def) {
		logger.trace('filter(object:{})', def);
		var filters = Object.getOwnPropertyNames(def).map(function(u) { return {d: u, f: build_filter(u)(def[u])} });
		return function (o) {
			logger.debug('filter(object:{})({})', def, o);
			for (i = 0, l = filters.length, x = filters[i]; i < l ; x = filters[++i]) {
				if (typeof o[x.d] == 'undefined' || ! x.f(o)) { return false; }
			}
			return true;
		}	
	}
	
	/**
	 * (field, ((def) -> (o) -> boolean), ((def) -> (o) -> boolean) ) -> (def) -> (o) -> boolean
	 */
	function build_filter(field) {
		return function (def) {
			switch (typeof def) {
				case 'boolean': {logger.trace('filter(boolean:{})', def); return function(o) { logger.debug('filter(boolean {})({})', def, o);return def;} }
				case 'function': {logger.trace('filter(function:{})', def);  return function(o) { logger.debug('filter(function:{})({})', def, o); return def(o[field]); } }
				case 'string': {logger.trace('filter(string:{})', def); return function(o) { logger.debug('filter(string:{})({})', def, o); return o[field] == def;} }
				case 'object':
					// a regex is used to match field
					if (def instanceof RegExp){ logger.trace('filter(RegExp:{})', def); return function (o) { logger.debug('filter(RegExp:{})({})', def, o); return o[field].match(def);} }
					// if its an array, the filter is ok if any of the element is ok
					if (def instanceof Array) { 
						logger.trace('filter(Array:{})', def); 
						var filters = def.map(function(v) { return build_filter(field)(v); });
						return function (o) {
							logger.trace('filter(Array:{})({})', def, o); 
							for (i = 0, l = filters.length, f = filters[i]; i < l ; f = filters[++i]) {
								if (f(o)) { return true; }
							}
							return false;
						}
					}
					// an object permit to have a filter by req param 
					else { 
						return filter_object(def);
					}
					break;
				default: { throw new String('Unsupported filter definition'); }
			}
		}
	}
	
	return {
		build : function (u) {
			return function (def) {
				logger.trace('here');
				switch (typeof def) {
					case 'boolean': 
					case 'function':
					case 'string': { return build_filter(u)(def); }
					case 'object':
						// a regex is used to match field
						if (def instanceof RegExp){ return build_filter(u)(def); }
						// if its an array, the filter is ok if any of the element is ok
						if (def instanceof Array) { return build_filter(u)(def); }
						// an object permit to have a filter by req param 
						else { return filter_object(def); }
						break;
					default: { throw new String('Unsupported filter definition'); }
				}
			}
		}
	}
}
