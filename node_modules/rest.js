/*
 * Copyright 2012 Nicolas Lochet Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *      
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

exports.inject = function (http_status, urlparser, logger) {
	var injected = {}
	var type = 'text/json';
	var data = '';
	
	injected.get = function (parsed, req, res) {
		//http_status(200)(res, type, data);
		http_status(404)(res);
	}
	injected.head = function(parsed, req, res) {
		http_status(404)(res);
	}
	injected.post = function(parsed, req, res) {
		http_status(404)(res);
	}
	injected.put = function (parsed, req, res) {
		http_status(404)(res);
	}
	injected.delete = function (parsed, req, res) {
		http_status(404)(res);
	}
	
	injected.build = function (root,biz) {
		//db
		
		return function (req, res) {
			var TOKEN_HEADER = 'X-Token';
			
			// Check we have a token
			if (req.headers.hasOwnProperty(TOKEN_HEADER)) {
				// is token still valid
				if (biz.valid(req.headers[TOKEN_HEADER])) {
					injected[req.method.toLowerCase()](urlparser(req.url.substring(root.length), true), req, res);
				} else {
					http_status(401)(res);
				}
			} else
			// Check for login request
			if (req.method=='POST' && req.url==root) {
				var obj = undefined;
				req.on('data', function (data) {
					try {
						obj = JSON.parse(data);
						biz.login(obj,function(session_id) {
							http_status(201)(res,'application/json','"'+session_id+'"');
						});
					} catch(e) {
						logger.error('error with {} {}: {} {}', typeof data, data, obj, e);
						http_status(500)(res);
					}
				});
				req.on('end', function () {
					if (!obj) {
						logger.error('could not parse data');
						http_status(500)(res);
					}
				});
			}
			// No header neither login request, let's refuse !
			else {
				http_status(401)(res);
			}
		}
	}
	
	return injected;
}
